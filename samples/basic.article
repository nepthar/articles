article: Writing Improvement Proposal: Articles
author: J. Parker <netphar@gmail.com>
date: March 2021


  Hi there. This is text formatting strategy that I'm working on called
  Articles. I want to be able to write in plain text and then publish it to a
  blog or something. I'd like your feedback on the structure and visual
  clarity of the spec. By the way, this part of the document is called the
  "preamble". Cool.

Abstract

  I keep notes in text, and I want something that I can publish. I like some,
  but not all parts of markdown. The goal of Articles (working title) is to
  take all of the good parts of markdown without the visually awful title
  stuff and make a "plain text first" opinionated, easily parseable format
  for long form writing, documentation, etc.

  Articles takes a lot of inspiration from RFCs, which I think are a good
  example of succinct, visually clear writing. In fact, I plan to write an
  RFC formatter.


The second Major Section

  This is the second major section. It's going to talk about paragraphs,
  titles, and sections. The most basic of Article's features.

Major Section 2, Minor Section 1: Titles

  There are two types of section headings, major and minor. At the top of
  this document, "Abstract" is a major heading while the title of this
  current section, "Major Section 2, Minor Section 1: Titles", is a minor
  heading. The difference is in how much visual space comes before the heading.

  Titles are easily distinguished from the rest of the text because they are
  not indented at all. Two consecutive empty lines (or three consecutive
  newline characters) form a "major section break". Any title that comes
  right after a "major section break" is considered a Major Title, while
  other titles are minor titles.

  If you were writing something extremely lengthy, like a book, you would do
  something like have each chapter as its own article file, thus giving you
  three logical levels of sections. Beyond that, the base Article system
  won't support anything more deeply nested.

Paragraphs

  Paragraphs are very simple and (I think?) quite similar to markdown.
  Standard "plain" paragraph text is distinguished by the fact that it is
  indented by two spaces, giving it some nice visual separation from titles.

  Although in this article, I use an empty line (minor section break) between
  titles and paragraphs, it is not necessary.

  Note that if you write two paragraphs without an empty line separating
  them, Articles will consider them to be the same paragraph. This allows
  you to either word-wrap using your text editor or manually, whichever you
  like.

  As an example, this sentence and the one below it are a paragraph. I like
  turtles.

Comments

  Sometimes, it might be useful to leave comments in your writing that don't get published. Articles turns lines that start with '// ' or '  // ' to become comments and will group them together like paragraphs. Put differently, comments can exist at either the "title level" or "paragraph level" of indentation.

  // This is a paragraph level comment. It will be framed together with
  // the line below. Comment text flows like paragraph text.
  This is a paragraph below the comment.

// Here is an example of a title-level comment. Do we wish to keep the
// section below?
Unused Title Section

  // There's nothing helpful to say here. No content, just comments

Blocks

  The third major, and arguably the most interesting component of Articles is
  block text. "Block Text" behaves very differently from regular text. It's
  the mechanism by which one can things like quotes, poetry, lyrics, images,
  tables, code blocks, etc.

  Blocks are indented by 4 spaces. Here's an example:

    This is a block quote
    isn't it nice
    it keeps all these linebreaks
    so just indent twice :)

  This is a very simple block quote which will be handled by Article's
  "default block decoder" which will be sure to preserve line breaks in the
  text.

  But that's just the beginning. Whenever a block is encountered, the first
  line is examined to see if there is a block directive. In the following
  example, there is a 'code' block directive given.

    code: python, 3.8
    def select_decoder(name, *args)
      # Fetch the right decoder for the given name and args.
      # In the case of this particular block, this function would be called
      # with:
      # name = 'code'
      # args = ['python', '3.8']


      # Uh oh, there's two empty newlines there. But that's okay, blocks
      # are immune to section breaks!
    return CodeDecoder(args[0])

  How do we know the code block ended? A code block ends either when the
  document itself ends, or we return to a lower level of indentation.

  Another example block type:

    tex: Figure 1: Something something bad at math
    \int\frac{sin(x)}{2}

  And finally one that supports a future enhancement:

    table: "Deaths by County"
    County     Deaths   Another
    Jefferson  12       Wheels
    Somewhere  45       Burritos
    Else       33       11111


Lists

  Lists are created by indenting one more space than a paragraph. Following along, a Title has an indent of 0, a paragraph has an indent of 2, a list has an indent of 3, and a block has an indent of 4+. Is this confusing? Maybe. But we're going to go with it for now.

  There are two types of lists in text form and they're purely cosmetic: compact and sparse. A compact list is like as shopping list where the items are very brief:

   - eggs
   - milk
   - goats

  A sparse list is what you'd use to contain more data. The only difference is that there are spaces between the list items.

   1. Eggs, the kind that you had back in those days when you were on the
      farm and everything was perfect and great.

   2. Milk, ideally form some kind of weird bird. I guess. Notice how these
      items can wrap to align the start of the text? That's just done so it
      looks neat and tidy.

   3. You could also use dashes, or whatever you like.

  This isn't necessary. The spaces between lines may be omitted - the list parser will understand.






  I think I sitll can't solve the problem of text reflow. Perhaps when somethings like this gets saved, it should rearrange the text
