title: A half-hour to learn Rust
original: https://fasterthanli.me/blog/2020/a-half-hour-to-learn-rust/
desc: A coding article with no sections and lots of inline code blocks


  In order to increase fluency in a programming language, one has to read a lot of it. But how can you read a lot of it if you don't know what it means?

  In this article, instead of focusing on one or two concepts, I'll try to go through as many Rust snippets as I can, and explain what the keywords and symbols they contain mean.

  Ready? Go!

  `let` introduces a variable binding:

    code: rust
    let x; // declare "x"
    x = 42; // assign 42 to "x"

  This can also be written as a `single` line:

    code: rust
    let x = 42;

  You can specify the variable's type explicitly with `:`, that's a type annotation:

    code: rust
    let x: i32; // `i32` is a signed 32-bit integer
    x = 42;

    // there's i8, i16, i32, i64, i128
    //    also u8, u16, u32, u64, u128 for unsigned

  This can also be written as a single line:

    code: rust
    let x: i32 = 42;

  If you declare a name and initialize it later, the compiler will prevent you from using it before it's initialized.

    code: rust
    let x;
    foobar(x); // error: borrow of possibly-uninitialized variable: `x`
    x = 42;

  However, doing this is completely fine:

    code: rust
    let x;
    x = 42;
    foobar(x); // the type of `x` will be inferred from here

  The underscore `self` is a special name - or rather, a “lack of name”. It basically means to throw away something:

    code: rust
    // this does *nothing* because 42 is a constant
    let self = 42;

    // this calls `get_thing` but throws away its result
    let self = get_thing();

  Names that start with an underscore are regular names, it's just that the compiler won't warn about them being unused:

    code: rust
    // we may use `_x` eventually, but our code is a work-in-progress
    // and we just wanted to get rid of a compiler warning for now.
    let _x = 42;

  Separate bindings with the same name can be introduced - you can shadow a variable binding:

    code: rust
    let x = 13;
    let x = x + 3;
    // using `x` after that line only refers to the second `x`,
    // the first `x` no longer exists.

  Rust has `tuples`, which you can think of as “fixed-length collections of values of different types”.

    code: rust
    let pair = ('a', 17);
    pair.0; // this is 'a'
    pair.1; // this is 17

  If we really we wanted to annotate the type of pair, we would write:
  ... etc.
